{"version":3,"sources":["hooks/UseFetch.tsx","components/WeatherCard.tsx","components/WeatherList.tsx","components/CitySelector.tsx","App.tsx","config/config.tsx","reportWebVitals.ts","index.tsx"],"names":["UseFetch","initUrl","useState","data","setData","error","setError","isLoading","setIsLoading","url","setUrl","useEffect","fetch","then","response","json","cod","message","catch","WeatherCard","props","date","Date","dt","Card","Img","variant","src","icon","Body","Title","main","toLocaleDateString","toLocaleTimeString","temp_min","temp_max","WeatherList","Row","weathers","map","item","Col","weather","CitySelector","city","setCity","xs","FormControl","placeholder","onChange","event","target","value","Button","onClick","onSearch","App","Container","className","list","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.35db2b1a.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\"\ntype Result = {\n    data: any\n    error: any,\n    isLoading: boolean,\n    setUrl: any,\n}\n\nconst UseFetch = (initUrl: string) => {\n    const [data, setData] = useState(null);\n    const [error, setError] = useState('');\n    const [isLoading, setIsLoading] = useState(false);\n    const [url, setUrl] = useState(initUrl);\n    \n\n    useEffect( () => {\n        if(!url) return;\n        setIsLoading(true);\n        setData(null);\n        setError('');\n\n        fetch(url)\n        .then((response) => response.json())\n        .then((data) => {\n            setIsLoading(false);\n            if (data.cod >= 400) {\n                setError(data.message);\n                return;\n            }\n            setData(data);\n        })\n        .catch((error) => {\n            setIsLoading(false);\n            setError(error);\n        });\n    }, [url]);\n\n    let result: Result = {data, error, isLoading, setUrl};\n    return result;\n};\n\nexport default UseFetch;","import React from 'react';\nimport {Card} from 'react-bootstrap';\n\nconst WeatherCard = (props: any) => {\n  // create a date object with Date class constructor\n  const date = new Date(props.dt);\n  return (\n    <Card>\n      <Card.Img\n        variant=\"top\"\n        // get the src from example url and pass the icon prop for icon code\n        src={`http://openweathermap.org/img/wn/${props.icon}@2x.png`}\n      />\n      <Card.Body>\n        <Card.Title>{props.main}</Card.Title>\n        {/*  datetime is received in milliseconds, let's turn into local date time */}\n        <p>\n          {date.toLocaleDateString()} - {date.toLocaleTimeString()}\n        </p>\n        {/* minimum temperature */}\n        <p>Min: {props.temp_min}</p>\n        {/* maximum temperature */}\n        <p>Max: {props.temp_max}</p>\n      </Card.Body>\n    </Card>\n  );\n};\nexport default WeatherCard;","import React from \"react\"\nimport { Col, Row } from \"react-bootstrap\"\nimport WeatherCard from \"./WeatherCard\"\n\nconst WeatherList = ( (props:any) => {\n\n    return (\n        <Row>\n            {props.weathers.map((item: any) => {\n                return <Col key= {item.dt}>\n                    <WeatherCard temp_max={item.main.temp_max} temp_min={item.main.temp_min} dt={item.dt * 1000} main={item.weather[0].main} icon={item.weather[0].icon}/>\n                </Col>\n            })}\n        </Row>\n    )\n})\n\nexport default WeatherList;","import React from \"react\";\nimport { useState } from \"react\";\nimport {Button, Col, FormControl, Row} from 'react-bootstrap';\n\nconst CitySelector = (props:any) => {\n    const [city, setCity] = useState('');\n    return (\n        <>\n            <Row>\n                <Col>\n                    <h1>Search your city</h1>\n                </Col>\n            </Row>\n            <Row>\n                <Col xs={4}>\n                    <FormControl \n                    placeholder = \"Enter City\"\n                    onChange = {(event: any) => setCity(event.target.value)}\n                    value = {city}/>\n                </Col>\n            </Row>\n            <Row>\n                <Col>\n                    <Button onClick={() => props.onSearch(city)}>Check Weather</Button>\n                </Col>\n            </Row>\n        </>\n\n    )\n}\n\nexport default CitySelector;","import React from 'react';\nimport './App.css';\nimport UseFetch from './hooks/UseFetch';\nimport WeatherList from './components/WeatherList';\nimport { Container } from 'react-bootstrap';\nimport CitySelector from './components/CitySelector';\nimport { API_BASE_URL, API_KEY } from './config/config';\n\nfunction App() {\n  const {data, error, isLoading, setUrl} = UseFetch('');\n\n  const getContent = () : any => {\n    if (error) return <h2> Error when fetching: {error} </h2>;\n    if (!data && isLoading) return <h2>LOADING</h2>;\n    if (!data) return null;\n    return <WeatherList weathers = {data.list} />;\n  }\n  return (\n    <Container className=\"App\">\n      <CitySelector onSearch= {(city: string) =>setUrl(`${API_BASE_URL}/data/2.5/forecast?q=${city}&cnt=5&appid=${API_KEY}`)} />\n      {getContent()}\n    </Container>\n  );\n}\n\nexport default App;\n","\nexport const API_KEY = '81b3ea905300ac5f206548c2afc95a49';\nexport const API_BASE_URL = 'http://api.openweathermap.org/';","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}